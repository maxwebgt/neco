// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API

const API_BASE = 'http://localhost:3001/api';

async function testAPI() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å–µ—Ä–≤–µ—Ä...\n');
        
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
        console.log('1. –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint...');
        const healthResponse = await fetch(`${API_BASE}/health`);
        const healthData = await healthResponse.json();
        console.log('‚úÖ Health:', healthData.message);
        
        // 2. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–æ–≤
        console.log('\n2. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–æ–≤...');
        const syncResponse = await fetch(`${API_BASE}/products/sync`, {
            method: 'POST'
        });
        const syncData = await syncResponse.json();
        console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:');
        console.log(`   - –£—Å–ø–µ—à–Ω–æ: ${syncData.results.success}`);
        console.log(`   - –û—à–∏–±–æ–∫: ${syncData.results.errors}`);
        
        // 3. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        console.log('\n3. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤...');
        const productsResponse = await fetch(`${API_BASE}/products?limit=5`);
        const productsData = await productsResponse.json();
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${productsData.products.length}`);
        console.log('   –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤:');
        productsData.products.slice(0, 3).forEach((product, index) => {
            console.log(`   ${index + 1}. ${product.name} - ${product.price}‚ÇΩ (${product.categoryName})`);
        });
        
        // 4. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã
        console.log('\n4. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã...');
        const featuredResponse = await fetch(`${API_BASE}/products/featured?limit=3`);
        const featuredData = await featuredResponse.json();
        console.log(`‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${featuredData.products.length}`);
        
        // 5. –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        console.log('\n5. –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
        const categoriesResponse = await fetch(`${API_BASE}/products/categories`);
        const categoriesData = await categoriesResponse.json();
        console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:');
        categoriesData.categories.forEach(cat => {
            console.log(`   - ${cat.name}: ${cat.count} —Ç–æ–≤–∞—Ä–æ–≤`);
        });
        
        // 6. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        console.log('\n6. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
        const statsResponse = await fetch(`${API_BASE}/products/admin/stats`);
        const statsData = await statsResponse.json();
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        console.log(`   - –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${statsData.stats.total}`);
        console.log(`   - –ù–æ–≤–∏–Ω–æ–∫: ${statsData.stats.newProducts}`);
        console.log(`   - –•–∏—Ç–æ–≤ –ø—Ä–æ–¥–∞–∂: ${statsData.stats.bestsellers}`);
        
        console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
        
        if (error.message.includes('fetch')) {
            console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run server');
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testAPI(); 