import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import Product from '../models/Product.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ú–∞–ø–ø–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
const categoryMapping = {
    '–º—ã–ª–æ': 'hygiene',
    '–∑—É–±–Ω–∞—è –ø–∞—Å—Ç–∞': 'hygiene', 
    '–±–∞–ª—å–∑–∞–º –¥–ª—è –≥—É–±': 'hygiene',
    '–∑—É–±–Ω–∞—è —â–µ—Ç–∫–∞ –±–∞–º–±—É–∫ –ª—é–∫—Å': 'hygiene',
    
    '–º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–∞—è —á–∞—à–∞': 'womens-care',
    '—Ö–ª–æ–ø–∫–æ–≤—ã–µ –¥–∏—Å–∫–∏': 'womens-care',
    
    '–≥—É–±–∫–∞ –ª—é—Ñ–∞ –ø–ª–æ—Å–∫–∞—è': 'cleaning',
    '–≥—É–±–∫–∞ –¥–∂—É—Ç': 'cleaning',
    '—Å–∏–ª–∏–∫–æ–Ω–æ–≤—ã–µ –≥—É–±–∫–∏': 'cleaning',
    '—Ü–µ–ª–ª—é–ª–æ–∑–Ω—ã–µ –≥—É–±–∫–∏': 'cleaning',
    '–µ—Ä—à–∏–∫–∏ –∫–æ–∫–æ—Å': 'cleaning',
    '–º–æ—á–∞–ª–∫–∞ –¥–∂—É—Ç': 'cleaning',
    '–ø–µ–º–∑–∞': 'cleaning',
    '–º—ã–ª—å–Ω–∏—Ü–∞': 'cleaning',
    
    '–∞–≤–æ—Å—å–∫–∏': 'bags',
    '–±–∞–±–∏–Ω—ã –¥–∂—É—Ç': 'bags',
    
    '–±–∞—Ö–∏–ª—ã': 'disposable',
    '–≤–∞—Ç–Ω—ã–µ –ø–∞–ª–æ—á–∫–∏': 'disposable',
    
    '–∫—Ä—É–≥–ª—è—à': 'beauty-sport',
    '–ª—é—Ñ–∞ —Ü–∏–ª–∏–Ω–¥—Ä': 'beauty-sport'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
function extractPrice(text) {
    // –ò—â–µ–º —Ü–µ–Ω—É –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    const pricePatterns = [
        /—Ü–µ–Ω–∞[:\s]*(\d+)\s*—Ä/i,
        /—Ü–µ–Ω–∞[:\s]*(\d+)\s*—Ä—É–±/i,
        /(\d+)\s*—Ä[^\w]/i,
        /(\d+)\s*—Ä—É–±/i,
        /—Å—Ç–æ–∏—Ç[:\s]*(\d+)/i,
        /(\d+)\s*—Ä—É–±–ª–µ–π/i
    ];
    
    for (const pattern of pricePatterns) {
        const match = text.match(pattern);
        if (match) {
            return parseInt(match[1]);
        }
    }
    
    return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞
function extractComposition(text) {
    const compositionPatterns = [
        /—Å–æ—Å—Ç–∞–≤[:\s]*([^\.]+)/i,
        /–≤ —Å–æ—Å—Ç–∞–≤–µ[:\s]*([^\.]+)/i,
        /—Å–æ–¥–µ—Ä–∂–∏—Ç[:\s]*([^\.]+)/i
    ];
    
    for (const pattern of compositionPatterns) {
        const match = text.match(pattern);
        if (match) {
            return match[1].trim();
        }
    }
    
    return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
function createDescription(text) {
    // –£–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ –∏ —Å–æ—Å—Ç–∞–≤–µ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    let description = text
        .replace(/—Ü–µ–Ω–∞[:\s]*\d+\s*—Ä[^\w]*/gi, '')
        .replace(/—Ü–µ–Ω–∞[:\s]*\d+\s*—Ä—É–±[^\w]*/gi, '')
        .replace(/—Å–æ—Å—Ç–∞–≤[:\s]*[^\.]+\./gi, '')
        .replace(/–≤ —Å–æ—Å—Ç–∞–≤–µ[:\s]*[^\.]+\./gi, '')
        .trim();
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ
    if (description.length > 500) {
        description = description.substring(0, 500) + '...';
    }
    
    return description;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async function copyProductImages(productName, productPath) {
    const publicImagesPath = path.join(__dirname, '../../public/images/products');
    const productImagesPath = path.join(publicImagesPath, productName);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞
    if (!fs.existsSync(publicImagesPath)) {
        fs.mkdirSync(publicImagesPath, { recursive: true });
    }
    
    if (!fs.existsSync(productImagesPath)) {
        fs.mkdirSync(productImagesPath, { recursive: true });
    }
    
    const imageExtensions = ['.jpg', '.jpeg', '.png', '.webp'];
    const files = fs.readdirSync(productPath);
    const imageFiles = files.filter(file => 
        imageExtensions.includes(path.extname(file).toLowerCase())
    );
    
    const copiedImages = [];
    
    for (const imageFile of imageFiles) {
        const sourcePath = path.join(productPath, imageFile);
        const destPath = path.join(productImagesPath, imageFile);
        
        try {
            fs.copyFileSync(sourcePath, destPath);
            copiedImages.push({
                filename: imageFile,
                path: `/images/products/${productName}/${imageFile}`,
                alt: `${productName} - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${copiedImages.length + 1}`
            });
        } catch (error) {
            console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${imageFile}:`, error.message);
        }
    }
    
    return copiedImages;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
export async function parseAndSaveProducts() {
    const ecoveryPath = path.join(process.cwd(), '—ç–∫–æ–≤–µ—Ä–∏');
    const txtDataPath = path.join(process.cwd(), '—Ç–æ–≤–∞—Ä—ã_–¥–∞–Ω–Ω—ã–µ');
    
    if (!fs.existsSync(ecoveryPath)) {
        throw new Error(`–ü–∞–ø–∫–∞ —ç–∫–æ–≤–µ—Ä–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${ecoveryPath}`);
    }
    
    if (!fs.existsSync(txtDataPath)) {
        throw new Error(`–ü–∞–ø–∫–∞ —Ç–æ–≤–∞—Ä—ã_–¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${txtDataPath}`);
    }
    
    const productFolders = fs.readdirSync(ecoveryPath, { withFileTypes: true })
        .filter(dirent => dirent.isDirectory())
        .map(dirent => dirent.name);
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${productFolders.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
    
    const results = {
        success: 0,
        errors: 0,
        processed: []
    };
    
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã
    await Product.deleteMany({});
    console.log('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    
    for (const productName of productFolders) {
        try {
            console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä: ${productName}`);
            
            // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ txt —Ñ–∞–π–ª–∞
            const txtFilePath = path.join(txtDataPath, `${productName}.txt`);
            if (!fs.existsSync(txtFilePath)) {
                console.warn(`–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: ${txtFilePath}`);
                continue;
            }
            
            const txtContent = fs.readFileSync(txtFilePath, 'utf8');
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            const price = extractPrice(txtContent);
            const composition = extractComposition(txtContent);
            const description = createDescription(txtContent);
            const category = categoryMapping[productName.toLowerCase()] || 'cleaning';
            
            if (!price) {
                console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞: ${productName}`);
                results.errors++;
                continue;
            }
            
            // –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const productPath = path.join(ecoveryPath, productName);
            const images = await copyProductImages(productName, productPath);
            
            if (images.length === 0) {
                console.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞: ${productName}`);
            }
            
            // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const product = new Product({
                name: productName,
                slug: productName.toLowerCase()
                    .replace(/\s+/g, '-')           // –ø—Ä–æ–±–µ–ª—ã –≤ –¥–µ—Ñ–∏—Å—ã
                    .replace(/[^a-z–∞-—è0-9\-]/g, '') // —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã
                    .replace(/-+/g, '-')            // —É–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –¥–µ—Ñ–∏—Å—ã
                    .replace(/^-|-$/g, ''),         // —É–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
                price: price,
                description: description || `–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —ç–∫–æ-—Ç–æ–≤–∞—Ä: ${productName}`,
                category: category,
                composition: composition,
                images: images,
                mainImage: images.length > 0 ? images[0].path : '/images/placeholder.jpg',
                tags: [category === 'hygiene' ? '–ì–∏–≥–∏–µ–Ω–∞' : 
                       category === 'cleaning' ? '–£–±–æ—Ä–∫–∞' :
                       category === 'bags' ? '–°—É–º–∫–∏' : '–≠–∫–æ-—Ç–æ–≤–∞—Ä—ã'],
                isNew: Math.random() > 0.7, // 30% —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–æ–≤—ã–µ
                isBestseller: Math.random() > 0.8, // 20% –∫–∞–∫ —Ö–∏—Ç—ã –ø—Ä–æ–¥–∞–∂
                sourceFile: txtFilePath,
                metaTitle: `${productName} - –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —ç–∫–æ-—Ç–æ–≤–∞—Ä | ECO.VERY`,
                metaDescription: description ? description.substring(0, 160) : `–ö—É–ø–∏—Ç—å ${productName} –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ ECO.VERY. –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —ç–∫–æ-—Ç–æ–≤–∞—Ä—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π.`
            });
            
            await product.save();
            
            results.success++;
            results.processed.push({
                name: productName,
                price: price,
                category: category,
                images: images.length,
                status: 'success'
            });
            
            console.log(`‚úÖ –¢–æ–≤–∞—Ä ${productName} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω (—Ü–µ–Ω–∞: ${price}—Ä, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${images.length})`);
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ ${productName}:`, error);
            results.errors++;
            results.processed.push({
                name: productName,
                error: error.message,
                status: 'error'
            });
        }
    }
    
    console.log(`\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞ ===`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${results.success}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${results.errors}`);
    console.log(`üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: ${await Product.countDocuments()}`);
    
    return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export async function getProductStats() {
    const total = await Product.countDocuments();
    const byCategory = await Product.aggregate([
        { $group: { _id: '$category', count: { $sum: 1 } } }
    ]);
    
    const newProducts = await Product.countDocuments({ isNew: true });
    const bestsellers = await Product.countDocuments({ isBestseller: true });
    
    return {
        total,
        byCategory,
        newProducts,
        bestsellers
    };
} 