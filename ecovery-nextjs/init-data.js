import mongoose from 'mongoose';
import { parseAndSaveProducts } from './server/utils/productParser.js';

const mongoUrl = process.env.MONGODB_URL || 'mongodb://localhost:27017/ecovery';

async function initializeData() {
    try {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ECO.VERY...');
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
        await mongoose.connect(mongoUrl);
        console.log('üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ MongoDB –≥–æ—Ç–æ–≤
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –ü–∞—Ä—Å–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–≤–∞—Ä–æ–≤...');
        const results = await parseAndSaveProducts();
        
        console.log('\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${results.success}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${results.errors}`);
        
        process.exit(0);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –≤ –±–∞–∑–µ
import Product from './server/models/Product.js';
mongoose.connect(mongoUrl).then(async () => {
    const count = await Product.countDocuments();
    if (count === 0) {
        console.log('üì¶ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');
        initializeData();
    } else {
        console.log(`üì¶ –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å ${count} —Ç–æ–≤–∞—Ä–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é`);
        process.exit(0);
    }
}).catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    process.exit(1);
}); 